name: Project Pipeline

on:
  push:
    branches: [develop, master]
  pull_request:
    branches: [develop, master]

jobs:
  setup:
    name: Install and cache dependencies
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache modules
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn install

  build:
    name: Build project
    needs: [setup]
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache modules
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/yarn.lock') }}

      - name: Run @nrwl build check
        run: yarn build

  lint:
    needs: [build, setup]
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        node-version: [16.x]
    name: Linting
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get cached modules
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/yarn.lock') }}

      - name: Lint
        run: yarn lint

  test:
    needs: [build, setup, lint]
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        node-version: [16.x]
    name: Testing
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get cached modules
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/yarn.lock') }}

      - name: Unit tests
        run: |
          yarn test site --coverage
          yarn test features-feedback --coverage
          yarn test shared --coverage

  e2e:
    needs: [build, setup, lint]
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        node-version: [16.x]
    name: E2e testing
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install fresh dependencies
        run: yarn install

      - name: E2e
        run: |
          yarn e2e site-e2e --coverage
          yarn e2e features-feedback-e2e --coverage

  deploy-preview:
    needs: [e2e, test]
    runs-on: ubuntu-20.04
    name: Project preview deployment
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/develop' }}
    steps:
      - uses: actions/checkout@v2
      - uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID}}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID}}

  deploy-prod:
    needs: [e2e, test]
    runs-on: ubuntu-20.04
    name: Project production deployment
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
    steps:
      - uses: actions/checkout@v2
      - uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID}}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID}}
          vercel-args: "--prod "
